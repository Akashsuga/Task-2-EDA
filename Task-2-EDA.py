# -*- coding: utf-8 -*-
"""Task-2-EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/144VBHBeS6CU6DRYAxOyKWBaaUkgmtRBV
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# ------------------- Load and Clean Data -------------------

# Load dataset
data = pd.read_csv("Titanic-Dataset.csv")

# Handle missing values with .loc to avoid SettingWithCopyWarning
data.loc[:, 'Age'] = data['Age'].fillna(data['Age'].median())
data.loc[:, 'Embarked'] = data['Embarked'].fillna(data['Embarked'].mode()[0])

# Optional: Extract Deck from Cabin (commented out due to many missing)
# data['Deck'] = data['Cabin'].str[0]
# data['Deck'].fillna('Unknown', inplace=True)

data.drop(columns=['Cabin'], inplace=True)

# ------------------- Feature Engineering -------------------

# Create FamilySize
data['FamilySize'] = data['SibSp'] + data['Parch'] + 1

# Extract Title from Name
data['Title'] = data['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)

# Map rare titles to 'Rare'
title_counts = data['Title'].value_counts()
rare_titles = title_counts[title_counts < 10].index
data['Title'] = data['Title'].replace(rare_titles, 'Rare')

# ------------------- Data Overview -------------------

print("First 5 rows:")
print(data.head())

print("\nDataset Info:")
print(data.info())

print("\nSummary Statistics:")
print(data.describe())

print("\nMissing Values in Each Column:")
print(data.isnull().sum())

# ------------------- Visualizations -------------------

# Survival count
sns.countplot(x='Survived', data=data)
plt.title('Survival Count (0 = No, 1 = Yes)')
plt.tight_layout()
plt.show()

# Passenger class count
sns.countplot(x='Pclass', data=data)
plt.title('Passenger Class Count')
plt.tight_layout()
plt.show()

# ------------------- Histograms for Numeric Features -------------------

numeric_features = ['Age', 'Fare', 'FamilySize']

for col in numeric_features:
    sns.histplot(data[col], bins=30, kde=True)
    plt.title(f'{col} Distribution')
    plt.xlabel(col)
    plt.ylabel('Frequency')
    plt.tight_layout()
    plt.show()

# ------------------- Boxplots for Numeric Features -------------------

for col in numeric_features:
    sns.boxplot(y=data[col])
    plt.title(f'Boxplot of {col}')
    plt.tight_layout()
    plt.show()

# ------------------- EDA Continued -------------------

# Age vs Survival
sns.boxplot(x='Survived', y='Age', data=data)
plt.title('Age Distribution by Survival')
plt.tight_layout()
plt.show()

# Survival by Sex (with percentages)
sex_survival = data.groupby(['Sex', 'Survived']).size().unstack(fill_value=0)
sex_survival_pct = sex_survival.div(sex_survival.sum(axis=1), axis=0)

sex_survival_pct.plot(kind='bar', stacked=True)
plt.title('Survival Rate by Sex')
plt.xlabel('Sex')
plt.ylabel('Proportion')
plt.legend(title='Survived', loc='upper right')
plt.tight_layout()
plt.show()

# Survival by Passenger Class (percentages)
pclass_survival = data.groupby(['Pclass', 'Survived']).size().unstack(fill_value=0)
pclass_survival_pct = pclass_survival.div(pclass_survival.sum(axis=1), axis=0)

pclass_survival_pct.plot(kind='bar', stacked=True)
plt.title('Survival Rate by Passenger Class')
plt.xlabel('Passenger Class')
plt.ylabel('Proportion')
plt.legend(title='Survived', loc='upper right')
plt.tight_layout()
plt.show()

# Fare distribution by Class
sns.boxplot(x='Pclass', y='Fare', data=data)
plt.title('Fare Distribution by Passenger Class')
plt.tight_layout()
plt.show()

# Survival by Embarked Port (percentages)
embarked_survival = data.groupby(['Embarked', 'Survived']).size().unstack(fill_value=0)
embarked_survival_pct = embarked_survival.div(embarked_survival.sum(axis=1), axis=0)

embarked_survival_pct.plot(kind='bar', stacked=True)
plt.title('Survival Rate by Embarked Port')
plt.xlabel('Embarked Port')
plt.ylabel('Proportion')
plt.legend(title='Survived', loc='upper right')
plt.tight_layout()
plt.show()

# Survival by Family Size (percentages)
family_survival = data.groupby(['FamilySize', 'Survived']).size().unstack(fill_value=0)
family_survival_pct = family_survival.div(family_survival.sum(axis=1), axis=0)

family_survival_pct.plot(kind='bar', stacked=True)
plt.title('Survival Rate by Family Size')
plt.xlabel('Family Size')
plt.ylabel('Proportion')
plt.legend(title='Survived', loc='upper right')
plt.tight_layout()
plt.show()

# Survival by Title (percentages)
title_survival = data.groupby(['Title', 'Survived']).size().unstack(fill_value=0)
title_survival_pct = title_survival.div(title_survival.sum(axis=1), axis=0)

title_survival_pct.plot(kind='bar', stacked=True, figsize=(10,5))
plt.title('Survival Rate by Title')
plt.xlabel('Title')
plt.ylabel('Proportion')
plt.legend(title='Survived', loc='upper right')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Fare distribution by Survival
sns.boxplot(x='Survived', y='Fare', data=data)
plt.title('Fare Distribution by Survival')
plt.tight_layout()
plt.show()

# ------------------- Feature Relationships -------------------

# Correlation heatmap (only numeric columns)
plt.figure(figsize=(8, 6))
sns.heatmap(data.select_dtypes(include=[np.number]).corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.tight_layout()
plt.show()

# Pairplot (limited columns)
sns.pairplot(data[['Age', 'Fare', 'FamilySize', 'Survived']], hue='Survived')
plt.suptitle('Pairplot of Numeric Features by Survival', y=1.02)
plt.show()

# ------------------- Stats -------------------

print("\nSkewness of numerical features:")
print(data[numeric_features].skew())

print("\nCorrelation Matrix:")
print(data.select_dtypes(include=[np.number]).corr())